<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gcgProject.dao.impl.RoomDaoImpl">

	<sql id="table"> room </sql>
	
	<resultMap type="room" id="roomMap">
		<result property="id" column="Id"/>
		<result property="roomNum" column="room_num"/>
		<result property="typeId" column="type_id"/>
		<result property="price" column="price"/>
		<result property="tvFlag" column="tv_flag"/>
		<result property="airconFlag" column="aircon_flag"/>
		<result property="showerFlag" column="shower_flag"/>
		<result property="windowFlag" column="window_flag"/>
		<result property="remark" column="remark"/>
		<result property="flag" column="flag"/>
		<result property="createTime" column="create_time"/>
	</resultMap>
	
	<sql id="sql_where">
		<if test="Id != null and Id != ''"> and Id = #{Id} </if>
		<if test="room_num != null and room_num != ''"> and room_num = #{room_num} </if>
		<if test="type_id != null"> and type_id = #{type_id} </if>
		<if test="price != null"> and price = #{price} </if>
		<if test="tv_flag != null and tv_flag != ''"> and tv_flag = #{tv_flag} </if>
		<if test="aircon_flag != null and aircon_flag != ''"> and aircon_flag = #{aircon_flag} </if>
		<if test="shower_flag != null and shower_flag != ''"> and shower_flag = #{shower_flag} </if>
		<if test="window_flag != null and window_flag != ''"> and window_flag = #{window_flag} </if>
		<if test="remark != null and remark != ''"> and remark = #{remark} </if>
		<if test="flag != null and flag != ''"> and flag = #{flag} </if>
		<if test="create_time != null"> and create_time = #{create_time} </if>
	</sql>
	
	<sql id="queryLikeSql">
		<if test="room_num != null and room_num != ''"><![CDATA[A.room_num LIKE concat('%',#{room_num}, '%')]]></if>
		<if test="type_id != null and type_id != ''"> and type_id = #{type_id} </if>
		<if test="flag != null and flag != ''"> and flag = #{flag} </if>
	</sql>
	
	<sql id="sql_where_key">
		Id = #{id}
	</sql>
	
	<sql id="sql_order_key">
		A.create_time desc
	</sql>
	
	<insert id="insert" parameterType="room" >
		insert into
		<include refid="table" />
		(
			Id, room_num, type_id, price, tv_flag, aircon_flag, shower_flag, window_flag, remark, flag, create_time
		) values(
			#{id}, #{roomNum}, #{typeId}, #{price}, #{tvFlag}, #{airconFlag}, #{showerFlag}, #{windowFlag}, #{remark}, #{flag}, #{createTime}
		)
	</insert>
	
	<insert id="batchInsert" parameterType="java.util.List" >
		insert into
		<include refid="table" />
		(
			Id, room_num, type_id, price, tv_flag, aircon_flag, shower_flag, window_flag, remark, flag, create_time
		) values
		<foreach collection="list" item="item" index="index" separator="," >
			(#{item.id}, #{item.roomNum}, #{item.typeId}, #{item.price}, #{item.tvFlag}, #{item.airconFlag}, #{item.showerFlag}, #{item.windowFlag}, #{item.remark}, #{item.flag}, #{item.createTime})
		</foreach>
	</insert>
	
	<delete id="delete" parameterType="room">
		delete from
		<include refid="table" />
		<where>
			<include refid="sql_where_key" />
		</where>
	</delete>
	
	<update id="update" parameterType="room">
		update
		<include refid="table" />
		<set>
			Id = #{id},
			room_num = #{roomNum},
			type_id = #{typeId},
			price = #{price},
			tv_flag = #{tvFlag},
			aircon_flag = #{airconFlag},
			shower_flag = #{showerFlag},
			window_flag = #{windowFlag},
			remark = #{remark},
			flag = #{flag},
			create_time = #{createTime}
		</set>
		<where>
			<include refid="sql_where_key" />
		</where>
	</update>
	
	<!-- 按主键查询 -->
	<select id="select" parameterType="room" resultMap="roomMap">
		select * from
		<include refid="table" />
		<where>
			<include refid="sql_where_key" />
		</where>
	</select>

	<!-- 按参数查询 -->
	<select id="selectBy" parameterType="java.util.Map" resultMap="roomMap">
		select * from
		<include refid="table" />
		<where>
			<include refid="sql_where" />
		</where>
	</select>

	<!-- 按参数查询（分页） -->
	<select id="findPage" parameterType="java.util.Map" resultType="roomDto">
		select 
			A.* ,
			B.name as roomtypeName
		from
			room as A 
				left join 
			roomtype as B on A.type_id = B.id
		<where>
			<include refid="queryLikeSql" />
		</where>
		order by
		<include refid="sql_order_key" />
		limit #{a}, #{b}
	</select>
	
	<!-- 按参数查询（分页）数量 -->
	<select id="findPageCount" parameterType="hashmap" resultType="integer">
		select count(1) from
			room as A 
				left join 
			roomtype as B on A.type_id = B.id
		<where>
			<include refid="queryLikeSql" />
		</where>
		order by
		<include refid="sql_order_key" />
	</select>
	
	<!-- 按参数查询（分页）数量 -->
	<select id="countRoomNum" parameterType="integer" resultType="integer">
		select count(1) from
			<include refid="table" />
		where flag = #{flag}
	</select>
	
</mapper>